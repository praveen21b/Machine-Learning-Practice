# -*- coding: utf-8 -*-
"""DataPruning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bd3QhqOFqDEQTPWAgM5DHBXDEEgaMy23

## Importing Libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""##Importing Dataset"""

dataset = pd.read_csv('Social_Network_Ads.csv')
dataset.head()

plt.scatter(dataset.Age,dataset.EstimatedSalary)
plt.axvline(x=25,color='r')
plt.title('Unpruned Dataset')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
#plt.legend()
plt.show()

"""##Dataset Pruning"""

dataset = dataset[dataset.Age > 25]
dataset.head()

dataset.to_csv('PrunedDataSet.csv', index=False)

X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

plt.scatter(X[:,0],X[:, 1])
plt.title('Pruned Dataset')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()

"""##Splitting Dataset into Traing and Test Set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

print(X_train)

print(y_train)

print(X_test)

print(y_test)

"""## Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

print(X_train)

#from sklearn.decomposition import PCA
#pca = PCA(n_components=2)
#X_train = pca.fit_transform(X_train)
#X_test = pca.transform(X_test)

"""##Training the Logistic Regression model on the Training set"""

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

"""## Predicting New Result"""

print(classifier.predict(sc.transform([[30,87000]])))

"""##Predicting the Test set results"""

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""## Accuracy Score"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)